; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ThreadProc@@YAKPEAX@Z				; ThreadProc
pdata	SEGMENT
$pdata$?ThreadProc@@YAKPEAX@Z DD imagerel $LN16
	DD	imagerel $LN16+416
	DD	imagerel $unwind$?ThreadProc@@YAKPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ThreadProc@@YAKPEAX@Z DD 010901H
	DD	0a209H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 32
i$ = 40
bdest$ = 48
bsrc$ = 56
gmem$ = 64
lpParameter$ = 96
?ThreadProc@@YAKPEAX@Z PROC				; ThreadProc
; File e:\github.com\andlabs\barspy\call\dumphglobal\call.cpp
; Line 38
$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
; Line 39
  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR lpParameter$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR a$[rsp], rax
; Line 45
  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00018	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00021	ff 10		 call	 QWORD PTR [rax]
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00028	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax
; Line 46
  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00031	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00036	75 0a		 jne	 SHORT $LN13@ThreadProc
; Line 47
  00038	e9 40 01 00 00	 jmp	 $LN12@ThreadProc
  0003d	e9 3b 01 00 00	 jmp	 $fail$17
$LN13@ThreadProc:
; Line 48
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00047	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00050	ff 50 08	 call	 QWORD PTR [rax+8]
  00053	48 89 44 24 40	 mov	 QWORD PTR gmem$[rsp], rax
; Line 49
  00058	48 83 7c 24 40
	00		 cmp	 QWORD PTR gmem$[rsp], 0
  0005e	75 0a		 jne	 SHORT $LN11@ThreadProc
; Line 50
  00060	e9 18 01 00 00	 jmp	 $LN10@ThreadProc
  00065	e9 13 01 00 00	 jmp	 $fail$17
$LN11@ThreadProc:
; Line 53
  0006a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00070	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0007b	48 8b 50 40	 mov	 rdx, QWORD PTR [rax+64]
  0007f	33 c9		 xor	 ecx, ecx
  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00086	ff 50 20	 call	 QWORD PTR [rax+32]
  00089	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  0008e	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
; Line 54
  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00097	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0009c	75 0a		 jne	 SHORT $LN9@ThreadProc
; Line 55
  0009e	e9 da 00 00 00	 jmp	 $LN8@ThreadProc
  000a3	e9 d5 00 00 00	 jmp	 $fail$17
$LN9@ThreadProc:
; Line 59
  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  000ad	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000b1	48 89 44 24 30	 mov	 QWORD PTR bdest$[rsp], rax
; Line 60
  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR gmem$[rsp]
  000bb	48 89 44 24 38	 mov	 QWORD PTR bsrc$[rsp], rax
; Line 61
  000c0	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000c9	eb 0d		 jmp	 SHORT $LN7@ThreadProc
$LN6@ThreadProc:
  000cb	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000d0	48 ff c0	 inc	 rax
  000d3	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN7@ThreadProc:
  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  000dd	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  000e1	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000e6	73 2b		 jae	 SHORT $LN5@ThreadProc
; Line 62
  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR bdest$[rsp]
  000ed	48 8b 4c 24 38	 mov	 rcx, QWORD PTR bsrc$[rsp]
  000f2	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000f5	88 08		 mov	 BYTE PTR [rax], cl
  000f7	48 8b 44 24 30	 mov	 rax, QWORD PTR bdest$[rsp]
  000fc	48 ff c0	 inc	 rax
  000ff	48 89 44 24 30	 mov	 QWORD PTR bdest$[rsp], rax
  00104	48 8b 44 24 38	 mov	 rax, QWORD PTR bsrc$[rsp]
  00109	48 ff c0	 inc	 rax
  0010c	48 89 44 24 38	 mov	 QWORD PTR bsrc$[rsp], rax
  00111	eb b8		 jmp	 SHORT $LN6@ThreadProc
$LN5@ThreadProc:
; Line 64
  00113	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00118	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0011c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00121	ff 50 10	 call	 QWORD PTR [rax+16]
  00124	85 c0		 test	 eax, eax
  00126	75 2b		 jne	 SHORT $LN4@ThreadProc
; Line 65
  00128	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0012d	ff 50 28	 call	 QWORD PTR [rax+40]
  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00135	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
; Line 66
  00138	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0013d	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  00141	75 10		 jne	 SHORT $LN3@ThreadProc
; Line 67
  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00148	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [rax+72], 0
; Line 68
  0014f	33 c0		 xor	 eax, eax
  00151	eb 48		 jmp	 SHORT $LN14@ThreadProc
$LN3@ThreadProc:
$LN4@ThreadProc:
; Line 71
  00153	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00158	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0015c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00161	ff 50 18	 call	 QWORD PTR [rax+24]
  00164	48 85 c0	 test	 rax, rax
  00167	74 04		 je	 SHORT $LN2@ThreadProc
; Line 72
  00169	eb 12		 jmp	 SHORT $LN1@ThreadProc
  0016b	eb 10		 jmp	 SHORT $fail$17
$LN2@ThreadProc:
; Line 74
  0016d	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00172	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1
; Line 75
  00179	33 c0		 xor	 eax, eax
  0017b	eb 1e		 jmp	 SHORT $LN14@ThreadProc
$LN1@ThreadProc:
$LN8@ThreadProc:
$LN10@ThreadProc:
$LN12@ThreadProc:
$fail$17:
; Line 78
  0017d	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00182	ff 50 28	 call	 QWORD PTR [rax+40]
  00185	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  0018a	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
; Line 79
  0018d	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00192	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [rax+72], 0
; Line 80
  00199	33 c0		 xor	 eax, eax
$LN14@ThreadProc:
; Line 81
  0019b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019f	c3		 ret	 0
?ThreadProc@@YAKPEAX@Z ENDP				; ThreadProc
_TEXT	ENDS
END
