// 3 february 2017
#include "barspy.hpp"

static const uint8_t call386[] = {
	0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0x8B, 0x45,
	0x08, 0x89, 0x45, 0xFC, 0xC7, 0x45, 0xF8, 0x00,
	0x00, 0x00, 0x00, 0x8D, 0x4D, 0xF8, 0x51, 0x6A,
	0x00, 0x6A, 0x00, 0x8B, 0x55, 0xFC, 0x8B, 0x02,
	0xFF, 0xD0, 0x8B, 0x4D, 0xFC, 0x89, 0x41, 0x18,
	0x8B, 0x55, 0xFC, 0x83, 0x7A, 0x18, 0x00, 0x74,
	0x0A, 0xE9, 0x86, 0x00, 0x00, 0x00, 0xE9, 0x81,
	0x00, 0x00, 0x00, 0x8B, 0x45, 0xF8, 0x50, 0x8B,
	0x4D, 0xFC, 0x8B, 0x51, 0x10, 0x52, 0x8B, 0x45,
	0xFC, 0x8B, 0x48, 0x08, 0xFF, 0xD1, 0x85, 0xC0,
	0x75, 0x51, 0x8B, 0x55, 0xFC, 0x8B, 0x42, 0x0C,
	0xFF, 0xD0, 0x89, 0x45, 0xF4, 0x83, 0x7D, 0xF4,
	0x00, 0x7F, 0x08, 0x8B, 0x4D, 0xF4, 0x89, 0x4D,
	0xF0, 0xEB, 0x18, 0x8B, 0x55, 0xF4, 0x81, 0xE2,
	0xFF, 0xFF, 0x00, 0x00, 0x81, 0xCA, 0x00, 0x00,
	0x07, 0x00, 0x81, 0xCA, 0x00, 0x00, 0x00, 0x80,
	0x89, 0x55, 0xF0, 0x8B, 0x45, 0xFC, 0x8B, 0x4D,
	0xF0, 0x89, 0x48, 0x18, 0x8B, 0x55, 0xFC, 0x83,
	0x7A, 0x18, 0x00, 0x75, 0x0A, 0x8B, 0x45, 0xFC,
	0xC7, 0x40, 0x18, 0x05, 0x40, 0x00, 0x80, 0xEB,
	0x1B, 0xEB, 0x19, 0x8B, 0x4D, 0xFC, 0x83, 0xC1,
	0x14, 0x51, 0x8B, 0x55, 0xF8, 0x52, 0x8B, 0x45,
	0xFC, 0x8B, 0x48, 0x04, 0xFF, 0xD1, 0x8B, 0x55,
	0xFC, 0x89, 0x42, 0x18, 0x83, 0x7D, 0xF8, 0x00,
	0x74, 0x0E, 0x8B, 0x45, 0xF8, 0x8B, 0x08, 0x8B,
	0x55, 0xF8, 0x52, 0x8B, 0x41, 0x08, 0xFF, 0xD0,
	0x33, 0xC0, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00,
};
static const size_t nCall386 = 216;

static const uint8_t callAMD64[] = {
	0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x83, 0xEC,
	0x48, 0x48, 0x8B, 0x44, 0x24, 0x50, 0x48, 0x89,
	0x44, 0x24, 0x28, 0x48, 0xC7, 0x44, 0x24, 0x30,
	0x00, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x44, 0x24,
	0x30, 0x33, 0xD2, 0x33, 0xC9, 0x48, 0x8B, 0x44,
	0x24, 0x28, 0xFF, 0x10, 0x48, 0x8B, 0x4C, 0x24,
	0x28, 0x89, 0x41, 0x30, 0x48, 0x8B, 0x44, 0x24,
	0x28, 0x83, 0x78, 0x30, 0x00, 0x74, 0x0A, 0xE9,
	0x9A, 0x00, 0x00, 0x00, 0xE9, 0x95, 0x00, 0x00,
	0x00, 0x48, 0x8B, 0x54, 0x24, 0x30, 0x48, 0x8B,
	0x44, 0x24, 0x28, 0x48, 0x8B, 0x48, 0x20, 0x48,
	0x8B, 0x44, 0x24, 0x28, 0xFF, 0x50, 0x10, 0x85,
	0xC0, 0x75, 0x5A, 0x48, 0x8B, 0x44, 0x24, 0x28,
	0xFF, 0x50, 0x18, 0x89, 0x44, 0x24, 0x20, 0x83,
	0x7C, 0x24, 0x20, 0x00, 0x7F, 0x0A, 0x8B, 0x44,
	0x24, 0x20, 0x89, 0x44, 0x24, 0x24, 0xEB, 0x16,
	0x8B, 0x44, 0x24, 0x20, 0x25, 0xFF, 0xFF, 0x00,
	0x00, 0x0D, 0x00, 0x00, 0x07, 0x00, 0x0F, 0xBA,
	0xE8, 0x1F, 0x89, 0x44, 0x24, 0x24, 0x48, 0x8B,
	0x44, 0x24, 0x28, 0x8B, 0x4C, 0x24, 0x24, 0x89,
	0x48, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x28, 0x83,
	0x78, 0x30, 0x00, 0x75, 0x0C, 0x48, 0x8B, 0x44,
	0x24, 0x28, 0xC7, 0x40, 0x30, 0x05, 0x40, 0x00,
	0x80, 0xEB, 0x23, 0xEB, 0x21, 0x48, 0x8B, 0x44,
	0x24, 0x28, 0x48, 0x83, 0xC0, 0x28, 0x48, 0x8B,
	0xD0, 0x48, 0x8B, 0x4C, 0x24, 0x30, 0x48, 0x8B,
	0x44, 0x24, 0x28, 0xFF, 0x50, 0x08, 0x48, 0x8B,
	0x4C, 0x24, 0x28, 0x89, 0x41, 0x30, 0x48, 0x83,
	0x7C, 0x24, 0x30, 0x00, 0x74, 0x10, 0x48, 0x8B,
	0x44, 0x24, 0x30, 0x48, 0x8B, 0x00, 0x48, 0x8B,
	0x4C, 0x24, 0x30, 0xFF, 0x50, 0x10, 0x33, 0xC0,
	0x48, 0x83, 0xC4, 0x48, 0xC3,
};
static const size_t nCallAMD64 = 253;

static ProcessHelper *mkProcessHelper(Process *p)
{
	ProcessHelper *ph;

	ph = new ProcessHelper(p);
	ph->SetCode(call386, nCall386, callAMD64, nCallAMD64);
	ph->AddField("CreateStreamOnHGlobalPtr", fieldPointer, 0, 4, 0, 8);
	ph->AddField("GetHGlobalFromStreamPtr", fieldPointer, 4, 4, 8, 8);
	ph->AddField("ImageList_WritePtr", fieldPointer, 8, 4, 16, 8);
	ph->AddField("GetLastErrorPtr", fieldPointer, 12, 4, 24, 8);
	ph->AddField("imglist", fieldPointer, 16, 4, 32, 8);
	ph->AddField("hGlobal", fieldPointer, 20, 4, 40, 8);
	ph->AddField("hr", fieldHRESULT, 24, 4, 48, 4);
	return ph;
}

static HGLOBAL runThread(ProcessHelper *ph, HIMAGELIST imglist)
{
	HGLOBAL ret;
	HRESULT hr;

	ph->WriteFieldPointer("imglist", imglist);
	ph->Run();

	ret = (HGLOBAL) ph->ReadFieldPointer("hGlobal");
	ph->ReadField("hr", &hr);
	if (hr != S_OK)
		panic(L"error serializing V5 HIMAGELIST: 0x%08I32X", hr);
	return ret;
}

HGLOBAL writeImageListV5(HWND hwnd, Process *p, HIMAGELIST imglist, void *pole32)
{
	HGLOBAL hGlobal;
	ProcessHelper *ph;
	void *pcomctl32;
	void *pkernel32;

	ph = mkProcessHelper(p);

	pcomctl32 = (void *) GetClassLongPtrW(hwnd, GCLP_HMODULE);
	pkernel32 = p->GetModuleBase(L"kernel32.dll");

	ph->WriteFieldProcAddress("CreateStreamOnHGlobalPtr", pole32, "CreateStreamOnHGlobal");
	ph->WriteFieldProcAddress("GetHGlobalFromStreamPtr", pole32, "GetHGlobalFromStream");
	ph->WriteFieldProcAddress("ImageList_WritePtr", pcomctl32, "ImageList_Write");
	ph->WriteFieldProcAddress("GetLastErrorPtr", pkernel32, "GetLastError");

	hGlobal = runThread(ph, imglist);
	delete ph;
	return hGlobal;
}
