// 3 february 2017
#include "barspy.hpp"

static const uint8_t call386[] = {
	0x55, 0x8B, 0xEC, 0x51, 0x8B, 0x45, 0x08, 0x89,
	0x45, 0xFC, 0x8B, 0x4D, 0xFC, 0x8B, 0x51, 0x08,
	0x52, 0x8B, 0x45, 0xFC, 0x8B, 0x08, 0xFF, 0xD1,
	0x8B, 0x55, 0xFC, 0x89, 0x42, 0x0C, 0x8B, 0x45,
	0xFC, 0x8B, 0x48, 0x04, 0xFF, 0xD1, 0x8B, 0x55,
	0xFC, 0x89, 0x42, 0x10, 0x33, 0xC0, 0x8B, 0xE5,
	0x5D, 0xC2, 0x04, 0x00,
};
static const size_t nCall386 = 52;

static const uint8_t callAMD64[] = {
	0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x83, 0xEC,
	0x38, 0x48, 0x8B, 0x44, 0x24, 0x40, 0x48, 0x89,
	0x44, 0x24, 0x20, 0x48, 0x8B, 0x44, 0x24, 0x20,
	0x48, 0x8B, 0x48, 0x10, 0x48, 0x8B, 0x44, 0x24,
	0x20, 0xFF, 0x10, 0x48, 0x8B, 0x4C, 0x24, 0x20,
	0x89, 0x41, 0x18, 0x48, 0x8B, 0x44, 0x24, 0x20,
	0xFF, 0x50, 0x08, 0x48, 0x8B, 0x4C, 0x24, 0x20,
	0x89, 0x41, 0x1C, 0x33, 0xC0, 0x48, 0x83, 0xC4,
	0x38, 0xC3,
};
static const size_t nCallAMD64 = 66;

static ProcessHelper *mkProcessHelper(Process *p)
{
	ProcessHelper *ph;

	ph = new ProcessHelper(p);
	ph->SetCode(call386, nCall386, callAMD64, nCallAMD64);
	ph->AddField("FreeLibraryPtr", fieldPointer, 0, 4, 0, 8);
	ph->AddField("GetLastErrorPtr", fieldPointer, 4, 4, 8, 8);
	ph->AddField("module", fieldPointer, 8, 4, 16, 8);
	ph->AddField("ret", fieldBOOL, 12, 4, 24, 4);
	ph->AddField("lastError", fieldDWORD, 16, 4, 28, 4);
	return ph;
}

static void runThread(ProcessHelper *ph, HMODULE module)
{
	BOOL ret;
	DWORD lastError;

	ph->WriteFieldPointer("module", module);
	ph->Run();

	ph->ReadField("ret", &ret);
	ph->ReadField("lastError", &lastError);
	if (ret == 0)
		panic(L"error freeing OLE32 from process: %I32d", lastError);
}

void freeLibraryProcess(Process *p, HMODULE module)
{
	ProcessHelper *ph;
	void *pkernel32;

	ph = mkProcessHelper(p);

	pkernel32 = p->GetModuleBase(L"kernel32.dll");

	ph->WriteFieldProcAddress("FreeLibraryPtr", pkernel32, "FreeLibrary");
	ph->WriteFieldProcAddress("GetLastErrorPtr", pkernel32, "GetLastError");

	runThread(ph, module);
	delete ph;
}
